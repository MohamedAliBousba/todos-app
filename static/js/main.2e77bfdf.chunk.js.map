{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","text","alignItems","margin","maxWidth","btn","completed","textDecoration","App","updatedTodos","classes","initialTodo","id","Math","random","body","useState","todos","setTodos","enteredTodo","setEnteredTodo","className","Container","TextField","label","multiline","fullWidth","value","onChange","e","target","rows","Button","onClick","variant","color","length","style","textAlign","TableContainer","component","Paper","Table","TableBody","map","todo","TableRow","TableCell","scope","align","IconButton","todoId","aria-label","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAkBMA,EAAYC,KAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,WAAY,SACZC,OAAQ,QACRC,SAAU,OAEdC,IAAK,CACDF,OAAQ,SAEZG,UAAW,CACPC,eAAgB,oBAqFTC,MAjFf,WACI,IAYIC,EAZEC,EAAUZ,IAEVa,EAAc,CAAEC,GAAIC,KAAKC,SAAUC,KAAM,eAAgBT,WAAW,GAH/D,EAKeU,mBAAS,CAACL,IALzB,mBAKJM,EALI,KAKGC,EALH,OAM2BF,mBAAS,IANpC,mBAMJG,EANI,KAMSC,EANT,KA8BX,OACI,sBAAKC,UAAU,MAAf,UACI,4CAEA,eAACC,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CACIF,UAAWX,EAAQT,KACnBW,GAAG,4BACHY,MAAM,WACNC,WAAS,EACTC,WAAS,EACTC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAeS,EAAEC,OAAOH,QACvCI,KAAM,IAEV,uBACA,cAACC,EAAA,EAAD,CAAQX,UAAWX,EAAQL,IAAK4B,QAvC5B,WACZf,EAAS,CAAC,CAAEN,GAAIC,KAAKC,SAAUC,KAAMI,EAAab,WAAW,IAArD,mBAAiEW,KACzEG,EAAe,KAqC2Cc,QAAQ,YAAYC,MAAM,UAA5E,wBAIIlB,GAA0B,IAAjBA,EAAMmB,SACf,oBAAIC,MAAO,CAAEC,UAAW,UAAxB,8BAGJ,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACK1B,EAAM2B,KAAI,SAACC,GAAD,OACP,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAW1B,UAAWwB,EAAKvC,UAAYI,EAAQJ,UAAY,GAAIkC,UAAU,KAAKQ,MAAM,MAApF,SACKH,EAAK9B,OAEV,eAACgC,EAAA,EAAD,CAAWE,MAAM,QAAjB,UACI,cAACC,EAAA,EAAD,CAAYjB,QAAS,kBAlDnCkB,EAkDsDN,EAAKjC,GAjD7EH,EAAeQ,EAAM2B,KAAI,SAAAC,GACrB,OAAGA,EAAKjC,KAAOuC,EACJ,2BAAKN,GAAZ,IAAkBvC,WAAYuC,EAAKvC,YAEhCuC,UAEX3B,EAAST,GAPQ,IAAC0C,GAkDiEC,aAAW,WAAWjB,MAAM,UAA/E,SACMU,EAAKvC,UAAY,cAAC,IAAD,IAAsB,cAAC,IAAD,MAE7C,cAAC4C,EAAA,EAAD,CAAYjB,QAAS,kBA1CrCkB,EA0CsDN,EAAKjC,GAzC3EH,EAAeQ,EAAMoC,QAAO,SAAAR,GAAI,OAAIA,EAAKjC,KAAOuC,UAChDjC,EAAST,GAFM,IAAC0C,GA0CgEC,aAAW,SAASjB,MAAM,YAA1E,SACI,cAAC,IAAD,WATGU,EAAKjC,oBC/ErC0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2e77bfdf.chunk.js","sourcesContent":["import './App.css';\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Container from \"@material-ui/core/Container\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport {useState} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    text: {\n        alignItems: 'center',\n        margin: \"5px 0\",\n        maxWidth: \"80%\"\n    },\n    btn: {\n        margin: \"5px 0\"\n    },\n    completed: {\n        textDecoration: 'line-through'\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    const initialTodo = { id: Math.random(), body: \"Hello World!\", completed: false }\n\n    const [todos, setTodos] = useState([initialTodo])\n    const [enteredTodo, setEnteredTodo] = useState('')\n\n    const addTodo = () => {\n        setTodos([{ id: Math.random(), body: enteredTodo, completed: false }, ...todos])\n        setEnteredTodo('')\n    }\n\n    let updatedTodos\n    const completeTodo = (todoId) => {\n        updatedTodos = todos.map(todo => {\n            if(todo.id === todoId){\n                return { ...todo, completed: !todo.completed }\n            }\n            return todo\n        })\n        setTodos(updatedTodos)\n    }\n\n\n    const deleteTodo = (todoId) => {\n        updatedTodos = todos.filter(todo => todo.id !== todoId)\n        setTodos(updatedTodos)\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Todos List</h2>\n\n            <Container>\n\n                <TextField\n                    className={classes.text}\n                    id=\"standard-multiline-static\"\n                    label=\"Add Todo\"\n                    multiline\n                    fullWidth\n                    value={enteredTodo}\n                    onChange={e => setEnteredTodo(e.target.value)}\n                    rows={4}\n                />\n                <br/>\n                <Button className={classes.btn} onClick={addTodo} variant=\"contained\" color=\"primary\">\n                    Add Todo\n                </Button>\n\n                { (!todos || todos.length === 0) && (\n                    <h3 style={{ textAlign: \"center\" }}>No Provided Todo</h3>\n                ) }\n\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableBody>\n                            {todos.map((todo) => (\n                                <TableRow key={todo.id}>\n                                    <TableCell className={todo.completed ? classes.completed : \"\"} component=\"th\" scope=\"row\">\n                                        {todo.body}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <IconButton onClick={() => completeTodo(todo.id)}  aria-label=\"complete\" color=\"primary\">\n                                            { todo.completed ? <CheckCircleIcon /> : <CheckCircleOutlineIcon/> }\n                                        </IconButton>\n                                        <IconButton onClick={() => deleteTodo(todo.id)} aria-label=\"delete\" color=\"secondary\">\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}